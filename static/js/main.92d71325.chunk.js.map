{"version":3,"sources":["Qrcode.jsx","reportWebVitals.js","index.js"],"names":["qrCode","QRCodeStyling","width","height","margin","image","dotsOptions","color","type","cornersSquareOptions","cornersDotOptions","backgroundOptions","imageOptions","crossOrigin","hideBackgroundDots","imageSize","qrOptions","typeNumber","mode","errorCorrectionLevel","Qrcode","useState","url","setUrl","setHeight","setWidth","logo","setLogo","mainMargin","setMainMargin","dotStyle","setDotStyle","dotColor","setDotColor","dotColorType","setDotColorType","dotGradientType","setDotGradientType","dotGradientOne","setDotGradientOne","dotGradientTwo","setDotGradientTwo","dotRotation","setDotRotation","cornerSQRStyle","setcornerSQRStyle","cornerSQRColor","setcornerSQRColor","cornerSQRColorType","setcornerSQRColorType","cornerSQRGradientType","setcornerSQRGradientType","cornerSQRGradientOne","setcornerSQRGradientOne","cornerSQRGradientTwo","setcornerSQRGradientTwo","cornerSQRRotation","setcornerSQRRotation","cornerDotStyle","setcornerDotStyle","cornerDotColor","setcornerDotColor","cornerDotColorType","setcornerDotColorType","cornerDotGradientType","setcornerDotGradientType","cornerDotGradientOne","setcornerDotGradientOne","cornerDotGradientTwo","setcornerDotGradientTwo","cornerDotRotation","setcornerDotRotation","BackgroundColor","setBackgroundColor","BackgroundColorType","setBackgroundColorType","BackgroundGradientType","setBackgroundGradientType","BackgroundGradientOne","setBackgroundGradientOne","BackgroundGradientTwo","setBackgroundGradientTwo","BackgroundRotation","setBackgroundRotation","hideImageDots","setHideImageDots","setImageSize","imageMargin","setImageMargin","qrTypeNumber","qrMode","qrErrorCorrectionLevel","fileExt","setFileExt","ref","useRef","useEffect","append","current","updatedProperties","finalUpdate","data","gradient","rotation","colorStops","offset","children","removeChild","update","onUrlChange","event","preventDefault","target","value","createBlob","files","rawFile","reader","FileReader","onload","evt","result","readAsDataURL","Container","fluid","Navbar","NavbarBrand","Row","Col","sm","md","lg","className","Card","Body","style","border","Footer","Form","Select","onChange","defaultValue","Button","onClick","download","extension","variant","Accordion","Header","Group","Label","Control","as","rows","onKeyUp","InputGroup","Text","e","Tab","id","defaultActiveKey","onSelect","sOp","ListGroup","horizontal","Item","eventKey","Content","Pane","ButtonGroup","name","min","max","Check","defaultChecked","step","selected","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAIIA,EAAS,IAAIC,IAAc,CAC3BC,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,MAAO,GACPC,YAAa,CACTC,MAAO,MACPC,KAAM,WAEVC,qBAAsB,CAClBF,MAAO,UACPC,KAAM,UAEVE,kBAAmB,CACfH,MAAO,UACPC,KAAM,UAEVG,kBAAmB,CACfJ,MAAO,WAEXK,aAAc,CACVC,YAAa,YACbT,OAAQ,GACRU,oBAAoB,EACpBC,UAAW,IAEfC,UAAW,CACPC,WAAY,EACZC,KAAM,OACNC,qBAAsB,OAilBfC,EA5kBA,WAEX,MAAsBC,mBAAS,qEAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,KAArC,mBAAOlB,EAAP,KAAeqB,EAAf,KACA,EAA0BH,mBAAS,KAAnC,mBAAOnB,EAAP,KAAcuB,EAAd,KACA,EAAwBJ,mBAAS,sFAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAoCN,mBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAGA,EAAgCR,mBAAS,UAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAgCV,mBAAS,WAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAAwCZ,mBAAS,UAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KACA,EAA8Cd,mBAAS,UAAvD,mBAAOe,EAAP,KAAwBC,EAAxB,KACA,GAA4ChB,mBAAS,WAArD,qBAAOiB,GAAP,MAAuBC,GAAvB,MACA,GAA4ClB,mBAAS,WAArD,qBAAOmB,GAAP,MAAuBC,GAAvB,MACA,GAAsCpB,mBAAS,GAA/C,qBAAOqB,GAAP,MAAoBC,GAApB,MAIA,GAA4CtB,mBAAS,UAArD,qBAAOuB,GAAP,MAAuBC,GAAvB,MACA,GAA4CxB,mBAAS,WAArD,qBAAOyB,GAAP,MAAuBC,GAAvB,MACA,GAAoD1B,mBAAS,UAA7D,qBAAO2B,GAAP,MAA2BC,GAA3B,MACA,GAA0D5B,mBAAS,UAAnE,qBAAO6B,GAAP,MAA8BC,GAA9B,MACA,GAAwD9B,mBAAS,WAAjE,qBAAO+B,GAAP,MAA6BC,GAA7B,MACA,GAAwDhC,mBAAS,WAAjE,qBAAOiC,GAAP,MAA6BC,GAA7B,MACA,GAAkDlC,mBAAS,GAA3D,qBAAOmC,GAAP,MAA0BC,GAA1B,MAGA,GAA4CpC,mBAAS,UAArD,qBAAOqC,GAAP,MAAuBC,GAAvB,MACA,GAA4CtC,mBAAS,WAArD,qBAAOuC,GAAP,MAAuBC,GAAvB,MACA,GAAoDxC,mBAAS,UAA7D,qBAAOyC,GAAP,MAA2BC,GAA3B,MACA,GAA0D1C,mBAAS,UAAnE,qBAAO2C,GAAP,MAA8BC,GAA9B,MACA,GAAwD5C,mBAAS,WAAjE,qBAAO6C,GAAP,MAA6BC,GAA7B,MACA,GAAwD9C,mBAAS,WAAjE,qBAAO+C,GAAP,MAA6BC,GAA7B,MACA,GAAkDhD,mBAAS,GAA3D,qBAAOiD,GAAP,MAA0BC,GAA1B,MAIA,GAA8ClD,mBAAS,WAAvD,qBAAOmD,GAAP,MAAwBC,GAAxB,MACA,GAAsDpD,mBAAS,UAA/D,qBAAOqD,GAAP,MAA4BC,GAA5B,MACA,GAA4DtD,mBAAS,UAArE,qBAAOuD,GAAP,MAA+BC,GAA/B,MACA,GAA0DxD,mBAAS,WAAnE,qBAAOyD,GAAP,MAA8BC,GAA9B,MACA,GAA0D1D,mBAAS,WAAnE,qBAAO2D,GAAP,MAA8BC,GAA9B,MACA,GAAoD5D,mBAAS,GAA7D,qBAAO6D,GAAP,MAA2BC,GAA3B,MAGA,GAA0C9D,oBAAS,GAAnD,qBAAO+D,GAAP,MAAsBC,GAAtB,MACA,GAAkChE,mBAAS,IAA3C,qBAAON,GAAP,MAAkBuE,GAAlB,MACA,GAAsCjE,mBAAS,IAA/C,qBAAOkE,GAAP,MAAoBC,GAApB,MAGA,GAAwCnE,mBAAS,GAAjD,qBAAOoE,GAAP,MACA,IADA,MAC4BpE,mBAAS,SAArC,qBAAOqE,GAAP,MACA,IADA,MAC4DrE,mBAAS,MAArE,qBAAOsE,GAAP,MAGA,IAHA,MAG8BtE,mBAAS,QAAvC,qBAAOuE,GAAP,MAAgBC,GAAhB,MACMC,GAAMC,iBAAO,MAEnBC,qBAAU,WACNhG,EAAOiG,OAAOH,GAAII,WACnB,IAQHF,qBAAU,WAGN,IA4KyBG,EAjGnBC,EAAc,CAChBC,KAAM/E,EACNnB,SACAD,QACAG,MAAOqB,EACPtB,OAAQwB,EACRtB,YAhFiB,WAAjB4B,EACM,CACE3B,MAAOyB,EACPxB,KAAMsB,GAER,CACEtB,KAAMsB,EACNwE,SAAU,CACN9F,KAAM4B,EACNmE,SAAU7D,GACV8D,WAAY,CACR,CAAEC,OAAQ,EAAGlG,MAAO+B,IACpB,CAAEmE,OAAQ,EAAGlG,MAAOiC,OAqEpC/B,qBA9DuB,WAAvBuC,GACM,CACExC,KAAMoC,GACNrC,MAAOuC,IAET,CACEtC,KAAMoC,GACN0D,SAAU,CACN9F,KAAM0C,GACNqD,SAAU/C,GACVgD,WAAY,CACR,CAAEC,OAAQ,EAAGlG,MAAO6C,IACpB,CAAEqD,OAAQ,EAAGlG,MAAO+C,OAmDpC5C,kBA5CuB,WAAvBoD,GACM,CACEtD,KAAMkD,GACNnD,MAAOqD,IAET,CACEpD,KAAMkD,GACN4C,SAAU,CACN9F,KAAMwD,GACNuC,SAAUjC,GACVkC,WAAY,CACR,CAAEC,OAAQ,EAAGlG,MAAO2D,IACpB,CAAEuC,OAAQ,EAAGlG,MAAO6D,OAiCpCzD,kBA1BwB,WAAxB+D,GACM,CACEnE,MAAOiE,IAET,CACE8B,SAAU,CACN9F,KAAMoE,GACN2B,SAAUrB,GACVsB,WAAY,CACR,CAAEC,OAAQ,EAAGlG,MAAOuE,IACpB,CAAE2B,OAAQ,EAAGlG,MAAOyE,OAiBpCpE,aAAc,CACVR,OAAQmF,GACRzE,mBAAoBsE,GACpBrE,UAAWA,KAoFMoF,EA1ELC,EA2EhBN,GAAII,QAAQQ,SAAS,KACrB1G,EAAS,IAAIC,IAAckG,GAC3BL,GAAII,QAAQS,YAAYb,GAAII,QAAQQ,SAAS,IAC7C1G,EAAOiG,OAAOH,GAAII,UA7EtBlG,EAAO4G,OAAOR,KAGf,CACCjG,EACAD,EACAwB,EACAE,EACAE,EACAE,EACAE,EACAZ,EACAsB,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACArE,GACAwE,GACAE,GACAC,GACAC,GACAvD,EACAE,GACAE,GACAE,KAGJ,IAAMmE,GAAc,SAACC,GACjBA,EAAMC,iBACNxF,EAAOuF,EAAME,OAAOC,QAkBxB,IAAMC,GAAa,SAACC,GAChB,IAAMC,EAAUD,EAAM,GAChBE,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAUC,GACtB7F,EAAQ0F,EAAOI,SAEnBJ,EAAOK,cAAcN,IAUzB,OAEI,eAACO,EAAA,EAAD,CAAWC,OAAO,EAAlB,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,iCAEJ,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,UAAU,MAArC,SACI,eAACC,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,KAAN,UACI,qBAAKxC,IAAKA,GAAKyC,MAAO,CAAEC,OAAQ,sBAEpC,cAACH,EAAA,EAAKI,OAAN,UACI,eAACV,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACA,eAACQ,EAAA,EAAKC,OAAN,CAAaC,SA9CX,SAAC9B,GACvBjB,GAAWiB,EAAME,OAAOC,QA6CsCA,MAAOrB,GAASiD,aAAcjD,GAAxE,UACI,wBAAQqB,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,uBAGJ,cAACe,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACA,cAACY,EAAA,EAAD,CAAQtI,KAAK,SAASuI,QAjDtB,WAEpB/I,EAAOgJ,SAAS,CACZC,UAAWrD,MA8CqDsD,QAAQ,UAAxD,kCAMZ,cAAClB,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAxB,SACI,eAACJ,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACI,eAACiB,EAAA,EAAD,WACI,cAACA,EAAA,EAAUC,OAAX,0BACA,cAACD,EAAA,EAAUb,KAAX,UACI,eAACI,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,4BACA,cAACZ,EAAA,EAAKa,QAAN,CAAcC,GAAG,WAAWC,KAAM,EAAGZ,aAAcvH,EAAKoI,QAAS7C,GAAa+B,SAAU/B,GAAaI,MAAO3F,cAK5H,cAAC0G,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACI,eAACiB,EAAA,EAAD,WACI,cAACA,EAAA,EAAUC,OAAX,wCAGA,eAACD,EAAA,EAAUb,KAAX,WACI,eAACI,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,wBACA,eAACK,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,qBACA,cAAClB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,SAASyG,MAAO/G,EAAO0I,SAAU,SAACiB,GAAD,OAAOpI,EAASoI,EAAE7C,OAAOC,QAAQyC,QAAS,SAACG,GAAD,OAAOpI,EAASoI,EAAE7C,OAAOC,UACvH,cAAC0C,EAAA,EAAWC,KAAZ,oBAEJ,eAACD,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,sBACA,cAAClB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,SAASyG,MAAO9G,EAAQyI,SAAU,SAACiB,GAAD,OAAOrI,EAAUqI,EAAE7C,OAAOC,QAAQyC,QAAS,SAACG,GAAD,OAAOrI,EAAUqI,EAAE7C,OAAOC,UAC1H,cAAC0C,EAAA,EAAWC,KAAZ,oBAGJ,eAACD,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,sCACA,cAAClB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,SAASyG,MAAOrF,EAAYgH,SAAU,SAACiB,GAAD,OAAOhI,EAAcgI,EAAE7C,OAAOC,QAAQyC,QAAS,SAACG,GAAD,OAAOhI,EAAcgI,EAAE7C,OAAOC,UACtI,cAAC0C,EAAA,EAAWC,KAAZ,uBAGR,eAAClB,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,yBACA,eAACQ,EAAA,EAAInC,UAAL,CAAeoC,GAAG,2BAA2BC,iBAAkBtF,GAAqBuF,SAAU,SAACC,GAAD,OAASvF,GAAuBuF,IAA9H,UACI,eAACC,EAAA,EAAD,CAAWH,iBAAkBtF,GAAqB0F,YAAU,EAA5D,UACI,cAACD,EAAA,EAAUE,KAAX,CAAgBC,SAAS,SAAzB,0BACA,cAACH,EAAA,EAAUE,KAAX,CAAgBC,SAAS,WAAzB,+BAGJ,eAACR,EAAA,EAAIS,QAAL,CAAanC,UAAU,OAAvB,UACI,cAAC0B,EAAA,EAAIU,KAAL,CAAUF,SAAS,SAAnB,SACI,eAACX,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,gCACA,cAAClB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQqI,aAAcrE,GAAiBoE,SAAU,SAACiB,GAAD,OAAOpF,GAAmBoF,EAAE7C,OAAOC,eAG/G,eAAC6C,EAAA,EAAIU,KAAL,CAAUF,SAAS,WAAnB,UACI,eAAC5B,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,4BACA,eAACmB,EAAA,EAAD,CAAa,aAAW,gBAAxB,UACI,cAAC3B,EAAA,EAAD,CAAQI,QAAoC,WAA3BtE,GAAsC,UAAY,kBAAmBmE,QAAS,kBAAMlE,GAA0B,WAA/H,oBACA,cAACiE,EAAA,EAAD,CAAQI,QAAoC,WAA3BtE,GAAsC,UAAY,kBAAmBmE,QAAS,kBAAMlE,GAA0B,WAA/H,0BAIR,eAAC6D,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,kCACA,eAACK,EAAA,EAAD,WACI,cAACjB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQoI,SAAU,SAACiB,GAAD,OAAO9E,GAAyB8E,EAAE7C,OAAOC,QAAQ4B,aAAc/D,GAAuBmC,MAAOnC,GAAuB4F,KAAK,SAC9J,cAAChC,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQoI,SAAU,SAACiB,GAAD,OAAO5E,GAAyB4E,EAAE7C,OAAOC,QAAQ4B,aAAc7D,GAAuBiC,MAAOjC,GAAuB0F,KAAK,aAGtK,cAAChC,EAAA,EAAKW,MAAN,UACI,eAACM,EAAA,EAAD,WACI,cAACA,EAAA,EAAWC,KAAZ,wBACA,cAAClB,EAAA,EAAKa,QAAN,CAAcQ,GAAG,qCAAqCvJ,KAAK,SAASoI,SAAU,SAACiB,GAAD,OAAO1E,GAAsB0E,EAAE7C,OAAOC,QAAQ0D,IAAI,IAAIC,IAAI,MAAM/B,aAAc3D,KAC5J,cAACyE,EAAA,EAAWC,KAAZ,qDAWpC,cAAC5B,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACI,eAACiB,EAAA,EAAD,WACI,cAACA,EAAA,EAAUC,OAAX,2BAGA,eAACD,EAAA,EAAUb,KAAX,WACI,eAACI,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,mBACA,cAACZ,EAAA,EAAKa,QAAN,CAAc/I,KAAK,OAAOoI,SA5I9D,SAA2BpB,GACvBN,GAAWM,EAAIR,OAAOG,aA8IM,eAACuB,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,2BACA,eAACK,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,+BACA,cAAClB,EAAA,EAAKmC,MAAN,CAAYrK,KAAK,WAAW4H,UAAU,MAAM0C,eAAgB1F,GAAe6B,MAAO7B,GAAewD,SAAU,SAACiB,GAAD,OAAOxE,IAAkBD,UAGxI,eAACuE,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,0BACA,cAAClB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,SAASmK,IAAI,IAAIC,IAAI,IAAIG,KAAK,MAAMnC,SAAU,SAACiB,GAAD,OAAOvE,GAAauE,EAAE7C,OAAOC,QAAQyC,QAAS,SAACG,GAAD,OAAOvE,GAAauE,EAAE7C,OAAOC,QAAQ4B,aAAc9H,QAEtK,eAAC4I,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,oCACA,cAAClB,EAAA,EAAKa,QAAN,CAAcQ,GAAG,oBAAoBvJ,KAAK,SAASmK,IAAI,IAAIC,IAAI,QAAQhC,SAAU,SAACiB,GAAD,OAAOrE,GAAeqE,EAAE7C,OAAOC,QAAQyC,QAAS,SAACG,GAAD,OAAOrE,GAAeqE,EAAE7C,OAAOC,QAAQ4B,aAActD,mBAO1M,cAACyC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACI,eAACiB,EAAA,EAAD,WACI,cAACA,EAAA,EAAUC,OAAX,0BAGA,eAACD,EAAA,EAAUb,KAAX,WACI,eAACI,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,oBACA,eAACZ,EAAA,EAAKC,OAAN,CAAaE,aAAc/G,EAAU8G,SAAU,SAACiB,GAAD,OAAO9H,EAAY8H,EAAE7C,OAAOC,QAAQ8C,GAAG,iBAAtF,UACI,wBAAQ9C,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,gBAAgB+D,SAAS,GAAvC,2BACA,wBAAQ/D,MAAM,SAAd,oBACA,wBAAQA,MAAM,iBAAd,kCAKR,eAACyB,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,yBACA,eAACQ,EAAA,EAAInC,UAAL,CAAeoC,GAAG,kCAAkCC,iBAAkB9H,EAAc+H,SAAU,SAACC,GAAD,OAAS/H,EAAgB+H,IAAvH,UACI,eAACC,EAAA,EAAD,CAAWH,iBAAkB9H,EAAckI,YAAU,EAArD,UACI,cAACD,EAAA,EAAUE,KAAX,CAAgBC,SAAS,SAAzB,0BACA,cAACH,EAAA,EAAUE,KAAX,CAAgBC,SAAS,WAAzB,+BAGJ,eAACR,EAAA,EAAIS,QAAL,CAAanC,UAAU,OAAvB,UACI,cAAC0B,EAAA,EAAIU,KAAL,CAAUF,SAAS,SAAnB,SACI,eAACX,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,qBACA,cAAClB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQqI,aAAc7G,EAAU4G,SAAU,SAACiB,GAAD,OAAO5H,EAAY4H,EAAE7C,OAAOC,QAAQyD,KAAK,cAG9G,eAACZ,EAAA,EAAIU,KAAL,CAAUF,SAAS,WAAnB,UACI,eAAC5B,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,4BACA,eAACmB,EAAA,EAAD,CAAa,aAAW,gBAAxB,UACI,cAAC3B,EAAA,EAAD,CAAQI,QAA6B,WAApB9G,EAA+B,UAAY,kBAAmB2G,QAAS,kBAAM1G,EAAmB,WAAjH,oBACA,cAACyG,EAAA,EAAD,CAAQI,QAA6B,WAApB9G,EAA+B,UAAY,kBAAmB2G,QAAS,kBAAM1G,EAAmB,WAAjH,0BAIR,eAACqG,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,kCACA,eAACK,EAAA,EAAD,WACI,cAACjB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQoI,SAAU,SAACiB,GAAD,OAAOtH,GAAkBsH,EAAE7C,OAAOC,QAAQ4B,aAAcvG,GAAgBoI,KAAK,SAClH,cAAChC,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQoI,SAAU,SAACiB,GAAD,OAAOpH,GAAkBoH,EAAE7C,OAAOC,QAAQ4B,aAAcrG,GAAgBkI,KAAK,aAG1H,cAAChC,EAAA,EAAKW,MAAN,UACI,eAACM,EAAA,EAAD,WACI,cAACA,EAAA,EAAWC,KAAZ,wBACA,cAAClB,EAAA,EAAKa,QAAN,CAAcQ,GAAG,8BAA8BvJ,KAAK,SAASoI,SAAU,SAACiB,GAAD,OAAOlH,GAAekH,EAAE7C,OAAOC,QAAQ0D,IAAI,IAAIC,IAAI,MAAM/B,aAAcnG,KAC9I,cAACiH,EAAA,EAAWC,KAAZ,qDAYpC,cAAC5B,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACI,eAACiB,EAAA,EAAD,WACI,cAACA,EAAA,EAAUC,OAAX,qCAGA,eAACD,EAAA,EAAUb,KAAX,WACI,eAACI,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,oBACA,eAACZ,EAAA,EAAKC,OAAN,CAAaE,aAAcjG,GAAgBgG,SAAU,SAACiB,GAAD,OAAOhH,GAAkBgH,EAAE7C,OAAOC,QAAQ8C,GAAG,uBAAlG,UACI,wBAAQ9C,MAAM,GAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,gBAAgB+D,SAAS,GAAvC,iCAGR,eAACtC,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,yBACA,eAACQ,EAAA,EAAInC,UAAL,CAAeoC,GAAG,6CAA6CC,iBAAkBhH,GAAoBiH,SAAU,SAACC,GAAD,OAASjH,GAAsBiH,IAA9I,UACI,eAACC,EAAA,EAAD,CAAWH,iBAAkBhH,GAAoBoH,YAAU,EAA3D,UACI,cAACD,EAAA,EAAUE,KAAX,CAAgBC,SAAS,SAAzB,0BACA,cAACH,EAAA,EAAUE,KAAX,CAAgBC,SAAS,WAAzB,+BAGJ,eAACR,EAAA,EAAIS,QAAL,CAAanC,UAAU,OAAvB,UACI,cAAC0B,EAAA,EAAIU,KAAL,CAAUF,SAAS,SAAnB,SACI,eAACX,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,qBACA,cAAClB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQqI,aAAc/F,GAAgB8F,SAAU,SAACiB,GAAD,OAAO9G,GAAkB8G,EAAE7C,OAAOC,QAAQyD,KAAK,cAG1H,eAACZ,EAAA,EAAIU,KAAL,CAAUF,SAAS,WAAnB,UACI,eAAC5B,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,4BACA,eAACmB,EAAA,EAAD,CAAa,aAAW,gBAAxB,UACI,cAAC3B,EAAA,EAAD,CAAQI,QAAmC,WAA1BhG,GAAqC,UAAY,kBAAmB6F,QAAS,kBAAM5F,GAAyB,WAA7H,oBACA,cAAC2F,EAAA,EAAD,CAAQI,QAAmC,WAA1BhG,GAAqC,UAAY,kBAAmB6F,QAAS,kBAAM5F,GAAyB,WAA7H,0BAIR,eAACuF,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,6BACA,eAACK,EAAA,EAAD,WACI,cAACjB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQoI,SAAU,SAACiB,GAAD,OAAOxG,GAAwBwG,EAAE7C,OAAOC,QAAQ4B,aAAczF,GAAsBsH,KAAK,SAC9H,cAAChC,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQoI,SAAU,SAACiB,GAAD,OAAOtG,GAAwBsG,EAAE7C,OAAOC,QAAQ4B,aAAcvF,GAAsBoH,KAAK,aAGtI,cAAChC,EAAA,EAAKW,MAAN,UACI,eAACM,EAAA,EAAD,WACI,cAACA,EAAA,EAAWC,KAAZ,wBACA,cAAClB,EAAA,EAAKa,QAAN,CAAcQ,GAAG,oCAAoCvJ,KAAK,SAASoI,SAAU,SAACiB,GAAD,OAAOpG,GAAqBoG,EAAE7C,OAAOC,QAAQ0D,IAAI,IAAIC,IAAI,MAAM/B,aAAcrF,KAC1J,cAACmG,EAAA,EAAWC,KAAZ,qDAWpC,cAAC5B,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACI,eAACiB,EAAA,EAAD,WACI,cAACA,EAAA,EAAUC,OAAX,kCAGA,eAACD,EAAA,EAAUb,KAAX,WACI,eAACI,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,gCACA,eAACZ,EAAA,EAAKC,OAAN,CAAaE,aAAcnF,GAAgBkF,SAAU,SAACiB,GAAD,OAAOlG,GAAkBkG,EAAE7C,OAAOC,QAAQ8C,GAAG,uBAAlG,UACI,wBAAQ9C,MAAM,GAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,MAAd,uBAGR,eAACyB,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,yBACA,eAACQ,EAAA,EAAInC,UAAL,CAAeoC,GAAG,yCAAyCC,iBAAkBlG,GAAoBmG,SAAU,SAACC,GAAD,OAASnG,GAAsBmG,IAA1I,UACI,eAACC,EAAA,EAAD,CAAWH,iBAAkBlG,GAAoBsG,YAAU,EAA3D,UACI,cAACD,EAAA,EAAUE,KAAX,CAAgBC,SAAS,SAAzB,0BACA,cAACH,EAAA,EAAUE,KAAX,CAAgBC,SAAS,WAAzB,+BAGJ,eAACR,EAAA,EAAIS,QAAL,CAAanC,UAAU,OAAvB,UACI,cAAC0B,EAAA,EAAIU,KAAL,CAAUF,SAAS,SAAnB,SACI,eAACX,EAAA,EAAD,CAAYvB,UAAU,OAAtB,UACI,cAACuB,EAAA,EAAWC,KAAZ,8BACA,cAAClB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQqI,aAAcjF,GAAgBgF,SAAU,SAACiB,GAAD,OAAOhG,GAAkBgG,EAAE7C,OAAOC,QAAQyD,KAAK,cAG1H,eAACZ,EAAA,EAAIU,KAAL,CAAUF,SAAS,WAAnB,UACI,eAAC5B,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,4BACA,eAACmB,EAAA,EAAD,CAAa,aAAW,gBAAxB,UACI,cAAC3B,EAAA,EAAD,CAAQI,QAAmC,WAA1BlF,GAAqC,UAAY,kBAAmB+E,QAAS,kBAAM9E,GAAyB,WAA7H,oBACA,cAAC6E,EAAA,EAAD,CAAQI,QAAmC,WAA1BlF,GAAqC,UAAY,kBAAmB+E,QAAS,kBAAM9E,GAAyB,WAA7H,0BAIR,eAACyE,EAAA,EAAKW,MAAN,WACI,cAACX,EAAA,EAAKY,MAAN,6BACA,eAACK,EAAA,EAAD,WACI,cAACjB,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQoI,SAAU,SAACiB,GAAD,OAAO1F,GAAwB0F,EAAE7C,OAAOC,QAAQ4B,aAAc3E,GAAsBwG,KAAK,SAC9H,cAAChC,EAAA,EAAKa,QAAN,CAAc/I,KAAK,QAAQoI,SAAU,SAACiB,GAAD,OAAOxF,GAAwBwF,EAAE7C,OAAOC,QAAQ4B,aAAczE,GAAsBsG,KAAK,aAGtI,cAAChC,EAAA,EAAKW,MAAN,UACI,eAACM,EAAA,EAAD,WACI,cAACA,EAAA,EAAWC,KAAZ,wBACA,cAAClB,EAAA,EAAKa,QAAN,CAAcQ,GAAG,oCAAoCvJ,KAAK,SAASoI,SAAU,SAACiB,GAAD,OAAOtF,GAAqBsF,EAAE7C,OAAOC,QAAQ0D,IAAI,IAAIC,IAAI,MAAM/B,aAAcvE,KAC1J,cAACqF,EAAA,EAAWC,KAAZ,iECplB7CqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92d71325.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport QRCodeStyling from 'qr-code-styling';\r\nimport { Accordion, ButtonGroup, Card, Col, Container, Form, InputGroup, ListGroup, Row, Tab, Button, Nav, NavItem, Navbar, NavbarBrand } from 'react-bootstrap';\r\n\r\nlet qrCode = new QRCodeStyling({\r\n    width: 300,\r\n    height: 300,\r\n    margin: 0,\r\n    image: \"\", // \"https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg\",\r\n    dotsOptions: {\r\n        color: \"red\",\r\n        type: \"rounded\",\r\n    },\r\n    cornersSquareOptions: {\r\n        color: \"#000000\",\r\n        type: \"square\",\r\n    },\r\n    cornersDotOptions: {\r\n        color: \"#000000\",\r\n        type: \"square\",\r\n    },\r\n    backgroundOptions: {\r\n        color: \"#ffffff\"\r\n    },\r\n    imageOptions: {\r\n        crossOrigin: \"anonymous\",\r\n        margin: 10,\r\n        hideBackgroundDots: true,\r\n        imageSize: 0.4\r\n    },\r\n    qrOptions: {\r\n        typeNumber: 0,\r\n        mode: \"Byte\",\r\n        errorCorrectionLevel: \"Q\"\r\n    }\r\n\r\n});\r\n\r\nconst Qrcode = () => {\r\n\r\n    const [url, setUrl] = useState(\"https://krishnadeveloper.github.io/react-qr-code-style/index.html\");\r\n    const [height, setHeight] = useState(300)\r\n    const [width, setWidth] = useState(300)\r\n    const [logo, setLogo] = useState(\"https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg\"); //https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg\r\n    const [mainMargin, setMainMargin] = useState(0);\r\n\r\n    // Dot Options\r\n    const [dotStyle, setDotStyle] = useState(\"square\");\r\n    const [dotColor, setDotColor] = useState(\"#000000\");\r\n    const [dotColorType, setDotColorType] = useState(\"single\");\r\n    const [dotGradientType, setDotGradientType] = useState(\"linear\");\r\n    const [dotGradientOne, setDotGradientOne] = useState(\"#000000\");\r\n    const [dotGradientTwo, setDotGradientTwo] = useState(\"#000000\");\r\n    const [dotRotation, setDotRotation] = useState(0)\r\n\r\n\r\n    // Corners Square Options\r\n    const [cornerSQRStyle, setcornerSQRStyle] = useState(\"square\");\r\n    const [cornerSQRColor, setcornerSQRColor] = useState(\"#000000\");\r\n    const [cornerSQRColorType, setcornerSQRColorType] = useState(\"single\");\r\n    const [cornerSQRGradientType, setcornerSQRGradientType] = useState(\"linear\");\r\n    const [cornerSQRGradientOne, setcornerSQRGradientOne] = useState(\"#000000\");\r\n    const [cornerSQRGradientTwo, setcornerSQRGradientTwo] = useState(\"#000000\");\r\n    const [cornerSQRRotation, setcornerSQRRotation] = useState(0)\r\n\r\n    // Corners Dot Options\r\n    const [cornerDotStyle, setcornerDotStyle] = useState(\"square\");\r\n    const [cornerDotColor, setcornerDotColor] = useState(\"#000000\");\r\n    const [cornerDotColorType, setcornerDotColorType] = useState(\"single\");\r\n    const [cornerDotGradientType, setcornerDotGradientType] = useState(\"linear\");\r\n    const [cornerDotGradientOne, setcornerDotGradientOne] = useState(\"#000000\");\r\n    const [cornerDotGradientTwo, setcornerDotGradientTwo] = useState(\"#000000\");\r\n    const [cornerDotRotation, setcornerDotRotation] = useState(0)\r\n\r\n\r\n    // Background Options\r\n    const [BackgroundColor, setBackgroundColor] = useState(\"#ffffff\");\r\n    const [BackgroundColorType, setBackgroundColorType] = useState(\"single\");\r\n    const [BackgroundGradientType, setBackgroundGradientType] = useState(\"linear\");\r\n    const [BackgroundGradientOne, setBackgroundGradientOne] = useState(\"#ffffff\");\r\n    const [BackgroundGradientTwo, setBackgroundGradientTwo] = useState(\"#ffffff\");\r\n    const [BackgroundRotation, setBackgroundRotation] = useState(0)\r\n\r\n    // Image Options\r\n    const [hideImageDots, setHideImageDots] = useState(true);\r\n    const [imageSize, setImageSize] = useState(0.4);\r\n    const [imageMargin, setImageMargin] = useState(10);\r\n\r\n    // QR Options\r\n    const [qrTypeNumber, setQrTypeNumber] = useState(0);\r\n    const [qrMode, setQrMode] = useState(\"Byte\");\r\n    const [qrErrorCorrectionLevel, setQrErrorCorrectionLevel] = useState(\"Q\")\r\n\r\n\r\n    const [fileExt, setFileExt] = useState(\"png\");\r\n    const ref = useRef(null);\r\n\r\n    useEffect(() => {\r\n        qrCode.append(ref.current);\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     qrCode.update({\r\n    //         data: url,\r\n    //     });\r\n    // }, [url]);\r\n\r\n    useEffect(() => {\r\n\r\n        // Dot Options\r\n        let dotsOpt =\r\n            dotColorType === \"single\"\r\n                ? {\r\n                    color: dotColor,\r\n                    type: dotStyle,\r\n                }\r\n                : {\r\n                    type: dotStyle,\r\n                    gradient: {\r\n                        type: dotGradientType,\r\n                        rotation: dotRotation,\r\n                        colorStops: [\r\n                            { offset: 0, color: dotGradientOne },\r\n                            { offset: 1, color: dotGradientTwo },\r\n                        ],\r\n                    },\r\n                };\r\n\r\n        // Corners Square Options\r\n        let cornerSqrOpt =\r\n            cornerSQRColorType === \"single\"\r\n                ? {\r\n                    type: cornerSQRStyle,\r\n                    color: cornerSQRColor,\r\n                }\r\n                : {\r\n                    type: cornerSQRStyle,\r\n                    gradient: {\r\n                        type: cornerSQRGradientType,\r\n                        rotation: cornerSQRRotation,\r\n                        colorStops: [\r\n                            { offset: 0, color: cornerSQRGradientOne },\r\n                            { offset: 1, color: cornerSQRGradientTwo },\r\n                        ],\r\n                    },\r\n                };\r\n\r\n        // Corners Dot Options\r\n        let cornerDotOpt =\r\n            cornerDotColorType === \"single\"\r\n                ? {\r\n                    type: cornerDotStyle,\r\n                    color: cornerDotColor,\r\n                }\r\n                : {\r\n                    type: cornerDotStyle,\r\n                    gradient: {\r\n                        type: cornerDotGradientType,\r\n                        rotation: cornerDotRotation,\r\n                        colorStops: [\r\n                            { offset: 0, color: cornerDotGradientOne },\r\n                            { offset: 1, color: cornerDotGradientTwo },\r\n                        ],\r\n                    },\r\n                };\r\n\r\n        // Background options\r\n        let backgroundOpt =\r\n            BackgroundColorType === \"single\"\r\n                ? {\r\n                    color: BackgroundColor,\r\n                }\r\n                : {\r\n                    gradient: {\r\n                        type: BackgroundGradientType,\r\n                        rotation: BackgroundRotation,\r\n                        colorStops: [\r\n                            { offset: 0, color: BackgroundGradientOne },\r\n                            { offset: 1, color: BackgroundGradientTwo },\r\n                        ],\r\n                    },\r\n                };\r\n\r\n\r\n        // console.log(cornerDotOpt)\r\n        const finalUpdate = {\r\n            data: url,\r\n            height,\r\n            width,\r\n            image: logo,\r\n            margin: mainMargin,\r\n            dotsOptions: dotsOpt,\r\n            cornersSquareOptions: cornerSqrOpt,\r\n            cornersDotOptions: cornerDotOpt,\r\n            backgroundOptions: backgroundOpt,\r\n            imageOptions: {\r\n                margin: imageMargin,\r\n                hideBackgroundDots: hideImageDots,\r\n                imageSize: imageSize,\r\n            },\r\n            // qrOptions:{\r\n            //     typeNumber:qrTypeNumber,\r\n            //     mode:qrMode,\r\n            //     errorCorrectionLevel:qrErrorCorrectionLevel\r\n            // }\r\n\r\n        }\r\n        // console.log({finalUpdate})\r\n        updateOnColorChange(finalUpdate);\r\n        qrCode.update(finalUpdate)\r\n\r\n\r\n    }, [\r\n        height,\r\n        width,\r\n        logo,\r\n        mainMargin,\r\n        dotStyle,\r\n        dotColor,\r\n        dotColorType,\r\n        url,\r\n        cornerSQRStyle,\r\n        cornerSQRColor,\r\n        cornerSQRColorType,\r\n        cornerSQRGradientType,\r\n        cornerSQRGradientOne,\r\n        cornerSQRGradientTwo,\r\n        cornerSQRRotation,\r\n        cornerDotStyle,\r\n        cornerDotColor,\r\n        cornerDotColorType,\r\n        cornerDotGradientType,\r\n        cornerDotGradientOne,\r\n        cornerDotGradientTwo,\r\n        cornerDotRotation,\r\n        BackgroundColor,\r\n        BackgroundColorType,\r\n        BackgroundGradientType,\r\n        BackgroundGradientOne,\r\n        BackgroundGradientTwo,\r\n        BackgroundRotation,\r\n        hideImageDots,\r\n        imageSize,\r\n        imageMargin,\r\n        qrTypeNumber,\r\n        qrMode,\r\n        qrErrorCorrectionLevel,\r\n        dotGradientType,\r\n        dotGradientOne,\r\n        dotGradientTwo,\r\n        dotRotation\r\n    ])\r\n\r\n    const onUrlChange = (event) => {\r\n        event.preventDefault();\r\n        setUrl(event.target.value);\r\n    };\r\n\r\n    const onExtensionChange = (event) => {\r\n        setFileExt(event.target.value);\r\n    };\r\n\r\n    const onDownloadClick = () => {\r\n        // qrCode.getRawData(\"png\").then(row => console.log(row))\r\n        qrCode.download({\r\n            extension: fileExt\r\n        });\r\n    };\r\n\r\n    function handleImageChange(evt) {\r\n        createBlob(evt.target.files)\r\n    }\r\n\r\n    const createBlob = (files) => {\r\n        const rawFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = function (evt) {\r\n            setLogo(reader.result)\r\n        }\r\n        reader.readAsDataURL(rawFile);\r\n    }\r\n\r\n    function updateOnColorChange(updatedProperties) {\r\n        if (ref.current.children[0]) {\r\n            qrCode = new QRCodeStyling(updatedProperties);\r\n            ref.current.removeChild(ref.current.children[0]);\r\n            qrCode.append(ref.current)\r\n        }\r\n    }\r\n    return (\r\n\r\n        <Container fluid={true}>\r\n            <Navbar>\r\n                <NavbarBrand>QR Code Designer</NavbarBrand>\r\n            </Navbar>\r\n            <Row>\r\n                <Col sm={12} md={6} lg={3} className=\"p-0\">\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <div ref={ref} style={{ border: \"2px dotted red\" }} />\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Row>\r\n                            <Col sm={12} md={6}>\r\n                            <Form.Select onChange={onExtensionChange} value={fileExt} defaultValue={fileExt}>\r\n                                <option value=\"png\">PNG</option>\r\n                                <option value=\"jpeg\">JPEG</option>\r\n                                <option value=\"webp\">WEBP</option>\r\n                            </Form.Select>\r\n                            </Col>\r\n                            <Col sm={12} md={6}>\r\n                            <Button type=\"button\" onClick={onDownloadClick} variant=\"success\">Download</Button>\r\n                            </Col>\r\n                            </Row>\r\n                        </Card.Footer>\r\n                    </Card>\r\n                </Col>\r\n                <Col sm={12} md={6} lg={9}>\r\n                    <Row>\r\n                        <Col sm={12} md={6}>\r\n                            <Accordion>\r\n                                <Accordion.Header>Set QR Data</Accordion.Header>\r\n                                <Accordion.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Label>URL/JSON/text</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} defaultValue={url} onKeyUp={onUrlChange} onChange={onUrlChange} value={url} />\r\n                                    </Form.Group>\r\n                                </Accordion.Body>\r\n                            </Accordion>\r\n                        </Col>\r\n                        <Col sm={12} md={6}>\r\n                            <Accordion>\r\n                                <Accordion.Header>\r\n                                    QR dimension & background\r\n                                </Accordion.Header>\r\n                                <Accordion.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Dimension</Form.Label>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroup.Text>Width:</InputGroup.Text>\r\n                                            <Form.Control type=\"number\" value={width} onChange={(e) => setWidth(e.target.value)} onKeyUp={(e) => setWidth(e.target.value)} />\r\n                                            <InputGroup.Text>px</InputGroup.Text>\r\n                                        </InputGroup>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroup.Text>Height:</InputGroup.Text>\r\n                                            <Form.Control type=\"number\" value={height} onChange={(e) => setHeight(e.target.value)} onKeyUp={(e) => setHeight(e.target.value)} />\r\n                                            <InputGroup.Text>px</InputGroup.Text>\r\n                                        </InputGroup>\r\n\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroup.Text>Margin (Outer spacing):</InputGroup.Text>\r\n                                            <Form.Control type=\"number\" value={mainMargin} onChange={(e) => setMainMargin(e.target.value)} onKeyUp={(e) => setMainMargin(e.target.value)} />\r\n                                            <InputGroup.Text>px</InputGroup.Text>\r\n                                        </InputGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Background</Form.Label>\r\n                                        <Tab.Container id=\"background-color-options\" defaultActiveKey={BackgroundColorType} onSelect={(sOp) => setBackgroundColorType(sOp)}>\r\n                                            <ListGroup defaultActiveKey={BackgroundColorType} horizontal>\r\n                                                <ListGroup.Item eventKey=\"single\">Single Color</ListGroup.Item>\r\n                                                <ListGroup.Item eventKey=\"gradient\">Gradient Color</ListGroup.Item>\r\n                                            </ListGroup>\r\n\r\n                                            <Tab.Content className=\"mt-3\">\r\n                                                <Tab.Pane eventKey=\"single\">\r\n                                                    <InputGroup className=\"mb-3\">\r\n                                                        <InputGroup.Text>Background Color:</InputGroup.Text>\r\n                                                        <Form.Control type=\"color\" defaultValue={BackgroundColor} onChange={(e) => setBackgroundColor(e.target.value)} />\r\n                                                    </InputGroup>\r\n                                                </Tab.Pane>\r\n                                                <Tab.Pane eventKey=\"gradient\">\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>Gradient Type</Form.Label>\r\n                                                        <ButtonGroup aria-label=\"Gradient Type\">\r\n                                                            <Button variant={BackgroundGradientType === \"linear\" ? \"success\" : \"outline-success\"} onClick={() => setBackgroundGradientType(\"linear\")}>Linear</Button>\r\n                                                            <Button variant={BackgroundGradientType === \"radial\" ? \"success\" : \"outline-success\"} onClick={() => setBackgroundGradientType(\"radial\")}>Radial</Button>\r\n                                                        </ButtonGroup>\r\n                                                    </Form.Group>\r\n                                                    {/* <label><input type=\"radio\" value=\"linear\" onClick={() => setBackgroundGradientType(\"linear\")} checked={BackgroundGradientType === \"linear\"} name=\"BackgroundsOptionsHelper\" /> Linear</label> <label><input type=\"radio\" value=\"radial\" name=\"BackgroundsOptionsHelper\" checked={BackgroundGradientType === \"radial\"} onClick={() => setBackgroundGradientType(\"radial\")} /> Radial</label> */}\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>Background Gradient</Form.Label>\r\n                                                        <InputGroup>\r\n                                                            <Form.Control type=\"color\" onChange={(e) => setBackgroundGradientOne(e.target.value)} defaultValue={BackgroundGradientOne} value={BackgroundGradientOne} name=\"from\" />\r\n                                                            <Form.Control type=\"color\" onChange={(e) => setBackgroundGradientTwo(e.target.value)} defaultValue={BackgroundGradientTwo} value={BackgroundGradientTwo} name=\"to\" />\r\n                                                        </InputGroup>\r\n                                                    </Form.Group>\r\n                                                    <Form.Group>\r\n                                                        <InputGroup>\r\n                                                            <InputGroup.Text>Rotation:</InputGroup.Text>\r\n                                                            <Form.Control id=\"form-Backgrounds-gradient-rotation\" type=\"number\" onChange={(e) => setBackgroundRotation(e.target.value)} min=\"0\" max=\"360\" defaultValue={BackgroundRotation} />\r\n                                                            <InputGroup.Text>° (degree)</InputGroup.Text>\r\n                                                        </InputGroup>\r\n                                                    </Form.Group>\r\n\r\n                                                </Tab.Pane>\r\n                                            </Tab.Content>\r\n                                        </Tab.Container>\r\n                                    </Form.Group>\r\n                                </Accordion.Body>\r\n                            </Accordion>\r\n                        </Col>\r\n                        <Col sm={12} md={6}>\r\n                            <Accordion>\r\n                                <Accordion.Header>\r\n                                    Logo / Image\r\n                                </Accordion.Header>\r\n                                <Accordion.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Logo</Form.Label>\r\n                                        <Form.Control type=\"file\" onChange={handleImageChange} />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Image option</Form.Label>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroup.Text>Hide Background:</InputGroup.Text>\r\n                                            <Form.Check type=\"checkbox\" className=\"p-2\" defaultChecked={hideImageDots} value={hideImageDots} onChange={(e) => setHideImageDots(!hideImageDots)} />\r\n                                            \r\n                                        </InputGroup>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroup.Text>Image Size:</InputGroup.Text>\r\n                                            <Form.Control type=\"number\" min=\"0\" max=\"1\" step=\"0.1\" onChange={(e) => setImageSize(e.target.value)} onKeyUp={(e) => setImageSize(e.target.value)} defaultValue={imageSize} />\r\n                                        </InputGroup>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroup.Text>Margin (Outer space):</InputGroup.Text>\r\n                                            <Form.Control id=\"form-image-margin\" type=\"number\" min=\"0\" max=\"10000\" onChange={(e) => setImageMargin(e.target.value)} onKeyUp={(e) => setImageMargin(e.target.value)} defaultValue={imageMargin} />\r\n                                        </InputGroup>\r\n\r\n                                    </Form.Group>\r\n                                </Accordion.Body>\r\n                            </Accordion>\r\n                        </Col>\r\n                        <Col sm={12} md={6}>\r\n                            <Accordion>\r\n                                <Accordion.Header>\r\n                                    Dot Options\r\n                                </Accordion.Header>\r\n                                <Accordion.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Style</Form.Label>\r\n                                        <Form.Select defaultValue={dotStyle} onChange={(e) => setDotStyle(e.target.value)} id=\"form-dots-type\">\r\n                                            <option value=\"square\">Square</option>\r\n                                            <option value=\"dots\">Dots</option>\r\n                                            <option value=\"rounded\">Rounded</option>\r\n                                            <option value=\"extra-rounded\" selected=\"\">Extra rounded</option>\r\n                                            <option value=\"classy\">Classy</option>\r\n                                            <option value=\"classy-rounded\">Classy rounded</option>\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Color Type</Form.Label>\r\n                                        <Tab.Container id=\"dot-color-options-tab-container\" defaultActiveKey={dotColorType} onSelect={(sOp) => setDotColorType(sOp)}>\r\n                                            <ListGroup defaultActiveKey={dotColorType} horizontal>\r\n                                                <ListGroup.Item eventKey=\"single\">Single Color</ListGroup.Item>\r\n                                                <ListGroup.Item eventKey=\"gradient\">Gradient Color</ListGroup.Item>\r\n                                            </ListGroup>\r\n\r\n                                            <Tab.Content className=\"mt-3\">\r\n                                                <Tab.Pane eventKey=\"single\">\r\n                                                    <InputGroup className=\"mb-3\">\r\n                                                        <InputGroup.Text>Color:</InputGroup.Text>\r\n                                                        <Form.Control type=\"color\" defaultValue={dotColor} onChange={(e) => setDotColor(e.target.value)} name=\"from\" />\r\n                                                    </InputGroup>\r\n                                                </Tab.Pane>\r\n                                                <Tab.Pane eventKey=\"gradient\">\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>Gradient Type</Form.Label>\r\n                                                        <ButtonGroup aria-label=\"Gradient Type\">\r\n                                                            <Button variant={dotGradientType === \"linear\" ? \"success\" : \"outline-success\"} onClick={() => setDotGradientType(\"linear\")}>Linear</Button>\r\n                                                            <Button variant={dotGradientType === \"radial\" ? \"success\" : \"outline-success\"} onClick={() => setDotGradientType(\"radial\")}>Radial</Button>\r\n                                                        </ButtonGroup>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>Background Gradient</Form.Label>\r\n                                                        <InputGroup>\r\n                                                            <Form.Control type=\"color\" onChange={(e) => setDotGradientOne(e.target.value)} defaultValue={dotGradientOne} name=\"from\" />\r\n                                                            <Form.Control type=\"color\" onChange={(e) => setDotGradientTwo(e.target.value)} defaultValue={dotGradientTwo} name=\"to\" />\r\n                                                        </InputGroup>\r\n                                                    </Form.Group>\r\n                                                    <Form.Group>\r\n                                                        <InputGroup>\r\n                                                            <InputGroup.Text>Rotation:</InputGroup.Text>\r\n                                                            <Form.Control id=\"form-dots-gradient-rotation\" type=\"number\" onChange={(e) => setDotRotation(e.target.value)} min=\"0\" max=\"360\" defaultValue={dotRotation} />\r\n                                                            <InputGroup.Text>° (degree)</InputGroup.Text>\r\n                                                        </InputGroup>\r\n                                                    </Form.Group>\r\n\r\n                                                </Tab.Pane>\r\n                                            </Tab.Content>\r\n                                        </Tab.Container>\r\n                                    </Form.Group>\r\n\r\n                                </Accordion.Body>\r\n                            </Accordion>\r\n                        </Col>\r\n                        <Col sm={12} md={6}>\r\n                            <Accordion>\r\n                                <Accordion.Header>\r\n                                    Corners Square Options\r\n                                </Accordion.Header>\r\n                                <Accordion.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Style</Form.Label>\r\n                                        <Form.Select defaultValue={cornerSQRStyle} onChange={(e) => setcornerSQRStyle(e.target.value)} id=\"form-cornerSQRs-type\">\r\n                                            <option value=\"\">None</option>\r\n                                            <option value=\"square\">Square</option>\r\n                                            <option value=\"dot\">Dot</option>\r\n                                            <option value=\"extra-rounded\" selected=\"\">Extra rounded</option>\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Color Type</Form.Label>\r\n                                        <Tab.Container id=\"corner-sqr-dot-color-options-tab-container\" defaultActiveKey={cornerSQRColorType} onSelect={(sOp) => setcornerSQRColorType(sOp)}>\r\n                                            <ListGroup defaultActiveKey={cornerSQRColorType} horizontal>\r\n                                                <ListGroup.Item eventKey=\"single\">Single Color</ListGroup.Item>\r\n                                                <ListGroup.Item eventKey=\"gradient\">Gradient Color</ListGroup.Item>\r\n                                            </ListGroup>\r\n\r\n                                            <Tab.Content className=\"mt-3\">\r\n                                                <Tab.Pane eventKey=\"single\">\r\n                                                    <InputGroup className=\"mb-3\">\r\n                                                        <InputGroup.Text>Color:</InputGroup.Text>\r\n                                                        <Form.Control type=\"color\" defaultValue={cornerSQRColor} onChange={(e) => setcornerSQRColor(e.target.value)} name=\"from\" />\r\n                                                    </InputGroup>\r\n                                                </Tab.Pane>\r\n                                                <Tab.Pane eventKey=\"gradient\">\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>Gradient Type</Form.Label>\r\n                                                        <ButtonGroup aria-label=\"Gradient Type\">\r\n                                                            <Button variant={cornerSQRGradientType === \"linear\" ? \"success\" : \"outline-success\"} onClick={() => setcornerSQRGradientType(\"linear\")}>Linear</Button>\r\n                                                            <Button variant={cornerSQRGradientType === \"radial\" ? \"success\" : \"outline-success\"} onClick={() => setcornerSQRGradientType(\"radial\")}>Radial</Button>\r\n                                                        </ButtonGroup>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>Color Gradient</Form.Label>\r\n                                                        <InputGroup>\r\n                                                            <Form.Control type=\"color\" onChange={(e) => setcornerSQRGradientOne(e.target.value)} defaultValue={cornerSQRGradientOne} name=\"from\" />\r\n                                                            <Form.Control type=\"color\" onChange={(e) => setcornerSQRGradientTwo(e.target.value)} defaultValue={cornerSQRGradientTwo} name=\"to\" />\r\n                                                        </InputGroup>\r\n                                                    </Form.Group>\r\n                                                    <Form.Group>\r\n                                                        <InputGroup>\r\n                                                            <InputGroup.Text>Rotation:</InputGroup.Text>\r\n                                                            <Form.Control id=\"form-cornerSQRs-gradient-rotation\" type=\"number\" onChange={(e) => setcornerSQRRotation(e.target.value)} min=\"0\" max=\"360\" defaultValue={cornerSQRRotation} />\r\n                                                            <InputGroup.Text>° (degree)</InputGroup.Text>\r\n                                                        </InputGroup>\r\n                                                    </Form.Group>\r\n\r\n                                                </Tab.Pane>\r\n                                            </Tab.Content>\r\n                                        </Tab.Container>\r\n                                    </Form.Group>\r\n                                </Accordion.Body>\r\n                            </Accordion>\r\n                        </Col>\r\n                        <Col sm={12} md={6}>\r\n                            <Accordion>\r\n                                <Accordion.Header>\r\n                                    Corners Dot Options\r\n                                </Accordion.Header>\r\n                                <Accordion.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Corners Dot Style</Form.Label>\r\n                                        <Form.Select defaultValue={cornerDotStyle} onChange={(e) => setcornerDotStyle(e.target.value)} id=\"form-cornerDots-type\">\r\n                                            <option value=\"\" >None</option>\r\n                                            <option value=\"square\">Square</option>\r\n                                            <option value=\"dot\">Dot</option>\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Color Type</Form.Label>\r\n                                        <Tab.Container id=\"corner-dot-color-options-tab-container\" defaultActiveKey={cornerDotColorType} onSelect={(sOp) => setcornerDotColorType(sOp)}>\r\n                                            <ListGroup defaultActiveKey={cornerDotColorType} horizontal>\r\n                                                <ListGroup.Item eventKey=\"single\">Single Color</ListGroup.Item>\r\n                                                <ListGroup.Item eventKey=\"gradient\">Gradient Color</ListGroup.Item>\r\n                                            </ListGroup>\r\n\r\n                                            <Tab.Content className=\"mt-3\">\r\n                                                <Tab.Pane eventKey=\"single\">\r\n                                                    <InputGroup className=\"mb-3\">\r\n                                                        <InputGroup.Text>Corners Square:</InputGroup.Text>\r\n                                                        <Form.Control type=\"color\" defaultValue={cornerDotColor} onChange={(e) => setcornerDotColor(e.target.value)} name=\"from\" />\r\n                                                    </InputGroup>\r\n                                                </Tab.Pane>\r\n                                                <Tab.Pane eventKey=\"gradient\">\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>Gradient Type</Form.Label>\r\n                                                        <ButtonGroup aria-label=\"Gradient Type\">\r\n                                                            <Button variant={cornerDotGradientType === \"linear\" ? \"success\" : \"outline-success\"} onClick={() => setcornerDotGradientType(\"linear\")}>Linear</Button>\r\n                                                            <Button variant={cornerDotGradientType === \"radial\" ? \"success\" : \"outline-success\"} onClick={() => setcornerDotGradientType(\"radial\")}>Radial</Button>\r\n                                                        </ButtonGroup>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>Color Gradient</Form.Label>\r\n                                                        <InputGroup>\r\n                                                            <Form.Control type=\"color\" onChange={(e) => setcornerDotGradientOne(e.target.value)} defaultValue={cornerDotGradientOne} name=\"from\" />\r\n                                                            <Form.Control type=\"color\" onChange={(e) => setcornerDotGradientTwo(e.target.value)} defaultValue={cornerDotGradientTwo} name=\"to\" />\r\n                                                        </InputGroup>\r\n                                                    </Form.Group>\r\n                                                    <Form.Group>\r\n                                                        <InputGroup>\r\n                                                            <InputGroup.Text>Rotation:</InputGroup.Text>\r\n                                                            <Form.Control id=\"form-cornerDots-gradient-rotation\" type=\"number\" onChange={(e) => setcornerDotRotation(e.target.value)} min=\"0\" max=\"360\" defaultValue={cornerDotRotation} />\r\n                                                            <InputGroup.Text>° (degree)</InputGroup.Text>\r\n                                                        </InputGroup>\r\n                                                    </Form.Group>\r\n\r\n                                                </Tab.Pane>\r\n                                            </Tab.Content>\r\n                                        </Tab.Container>\r\n                                    </Form.Group>\r\n                                </Accordion.Body>\r\n                            </Accordion>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Qrcode\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Qrcode';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n   <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}